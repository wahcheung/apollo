syntax = "proto2";

package apollo.routing;

import "modules/common/proto/header.proto";
import "modules/common/proto/geometry.proto";
import "modules/common/proto/error_code.proto";
import "modules/map/proto/map_parking_space.proto";

message LaneWaypoint {
  // Note: waypoint所在的Lane的Id
  optional string id = 1;
  // Note: waypoint相对于Lane起点的距离
  optional double s = 2;
  // Note: waypoint的坐标
  optional apollo.common.PointENU pose = 3;
}

message LaneSegment {
  // Note: 所在Lane的Id
  optional string id = 1;
  // Note: Segment起始位置的s(相对于所在Lane的起点)
  optional double start_s = 2;
  // Note: Segment结束位置的s(相对于所在Lane的起点)
  optional double end_s = 3;
}

message RoutingRequest {
  optional apollo.common.Header header = 1;
  // at least two points. The first is start point, the end is final point.
  // The routing must go through each point in waypoint.
  repeated LaneWaypoint waypoint = 2;
  // Note: LaneSegment黑名单, 表示这些LaneSegment不能通过
  repeated LaneSegment blacklisted_lane = 3;
  // Note: Road黑名单, 表示这些Road中的所有Lane都不能通过
  repeated string blacklisted_road = 4;
  optional bool broadcast = 5 [default = true];
  optional apollo.hdmap.ParkingSpace parking_space = 6;
}

message Measurement {
  optional double distance = 1;
}

enum ChangeLaneType {
  FORWARD = 0;
  LEFT = 1;
  RIGHT = 2;
};

message Passage {
  repeated LaneSegment segment = 1;
  // Note: whether the passage can lead to another passage in routing
  optional bool can_exit = 2;
  // Note: 当前passage如何进入下一个passage
  optional ChangeLaneType change_lane_type = 3 [default = FORWARD];
}

message RoadSegment {
  optional string id = 1;
  repeated Passage passage = 2;
}

message RoutingResponse {
  optional apollo.common.Header header = 1;
  repeated RoadSegment road = 2;
  optional Measurement measurement = 3;
  optional RoutingRequest routing_request = 4;

  // the map version which is used to build road graph
  optional bytes map_version = 5;
  optional apollo.common.StatusPb status = 6;
}
